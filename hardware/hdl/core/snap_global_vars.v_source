/*
 * Copyright 2019 International Business Machines
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
`timescale 1ns/1ps
`define DEBUG
`define FRAMEWORK

///////////////////////////////////////////////////
// Card Names
#if defined(CONFIG_AD9V3)
`define AD9V3
#endif

#if defined(CONFIG_BW250SOC)
`define BW250SOC
#endif

#if defined(CONFIG_AD9H3)
`define AD9H3
#endif

#if defined(CONFIG_AD9H335)
`define AD9H3
#endif

#if defined(CONFIG_AD9H7)
`define AD9H7
#endif

///////////////////////////////////////////////////
#if defined(CONFIG_ENABLE_ILA)
`define ILA_DEBUG
#endif

#if defined(CONFIG_ENABLE_ODMA)
`define ENABLE_ODMA
#endif

#if defined(CONFIG_ENABLE_ODMA_ST_MODE)
`define ENABLE_ODMA_ST_MODE
#endif

#if defined(CONFIG_ENABLE_ODMA_512)
`define ENABLE_ODMA_512
#endif

#if defined(CONFIG_ENABLE_NVME)
`define ENABLE_NVME
#endif

#if defined(CONFIG_ENABLE_DDR)
`define ENABLE_AXI_CARD_MEM
`define ENABLE_DDR
#endif

#if defined(CONFIG_ENABLE_BRAM)
`define ENABLE_AXI_CARD_MEM
`define ENABLE_BRAM
#endif

#if defined(CONFIG_ENABLE_HBM)
`define ENABLE_AXI_CARD_MEM
`define ENABLE_HBM
#endif

#if defined(CONFIG_ENABLE_ETHERNET)
`define ENABLE_ETHERNET
#endif

#if defined(CONFIG_ENABLE_ETH_LOOP_BACK)
`define ENABLE_ETH_LOOP_BACK
#endif

#if defined(CONFIG_ENABLE_EMAC_V3_1)
`define ENABLE_EMAC_V3_1
#endif

#if defined(CONFIG_HLS_VITIS_USED)
`define HLS_VITIS_USED
#endif

#if defined(CONFIG_ENABLE_9H3_LED)
`define ENABLE_9H3_LED
#endif

#if defined(CONFIG_ENABLE_9H3_EEPROM)
`define ENABLE_9H3_EEPROM
#endif

#if defined(CONFIG_ENABLE_9H3_AVR)
`define ENABLE_9H3_AVR
#endif

#if defined(CONFIG_ACTION_HALF_WIDTH)
`define ACTION_HALF_WIDTH
#endif

#if defined(CONFIG_ACTION_USER_CLOCK)
`define ACTION_USER_CLOCK
#endif

// The following variables are generated by ${SNAP_ROOT}/scripts/snap_cfg script
#if defined(CONFIG_HBM_AXI_IF_P0)
`define HBM_AXI_IF_P0
#endif
#if defined(CONFIG_HBM_AXI_IF_P1)
`define HBM_AXI_IF_P1
#endif
#if defined(CONFIG_HBM_AXI_IF_P2)
`define HBM_AXI_IF_P2
#endif
#if defined(CONFIG_HBM_AXI_IF_P3)
`define HBM_AXI_IF_P3
#endif
#if defined(CONFIG_HBM_AXI_IF_P4)
`define HBM_AXI_IF_P4
#endif
#if defined(CONFIG_HBM_AXI_IF_P5)
`define HBM_AXI_IF_P5
#endif
#if defined(CONFIG_HBM_AXI_IF_P6)
`define HBM_AXI_IF_P6
#endif
#if defined(CONFIG_HBM_AXI_IF_P7)
`define HBM_AXI_IF_P7
#endif
#if defined(CONFIG_HBM_AXI_IF_P8)
`define HBM_AXI_IF_P8
#endif
#if defined(CONFIG_HBM_AXI_IF_P9)
`define HBM_AXI_IF_P9
#endif
#if defined(CONFIG_HBM_AXI_IF_P10)
`define HBM_AXI_IF_P10
#endif
#if defined(CONFIG_HBM_AXI_IF_P11)
`define HBM_AXI_IF_P11
#endif
#if defined(CONFIG_HBM_AXI_IF_P12)
`define HBM_AXI_IF_P12
#endif
#if defined(CONFIG_HBM_AXI_IF_P13)
`define HBM_AXI_IF_P13
#endif
#if defined(CONFIG_HBM_AXI_IF_P14)
`define HBM_AXI_IF_P14
#endif
#if defined(CONFIG_HBM_AXI_IF_P15)
`define HBM_AXI_IF_P15
#endif
#if defined(CONFIG_HBM_AXI_IF_P16)
`define HBM_AXI_IF_P16
#endif
#if defined(CONFIG_HBM_AXI_IF_P17)
`define HBM_AXI_IF_P17
#endif
#if defined(CONFIG_HBM_AXI_IF_P18)
`define HBM_AXI_IF_P18
#endif
#if defined(CONFIG_HBM_AXI_IF_P19)
`define HBM_AXI_IF_P19
#endif
#if defined(CONFIG_HBM_AXI_IF_P20)
`define HBM_AXI_IF_P20
#endif
#if defined(CONFIG_HBM_AXI_IF_P21)
`define HBM_AXI_IF_P21
#endif
#if defined(CONFIG_HBM_AXI_IF_P22)
`define HBM_AXI_IF_P22
#endif
#if defined(CONFIG_HBM_AXI_IF_P23)
`define HBM_AXI_IF_P23
#endif
#if defined(CONFIG_HBM_AXI_IF_P24)
`define HBM_AXI_IF_P24
#endif
#if defined(CONFIG_HBM_AXI_IF_P25)
`define HBM_AXI_IF_P25
#endif
#if defined(CONFIG_HBM_AXI_IF_P26)
`define HBM_AXI_IF_P26
#endif
#if defined(CONFIG_HBM_AXI_IF_P27)
`define HBM_AXI_IF_P27
#endif
#if defined(CONFIG_HBM_AXI_IF_P28)
`define HBM_AXI_IF_P28
#endif
#if defined(CONFIG_HBM_AXI_IF_P29)
`define HBM_AXI_IF_P29
#endif
#if defined(CONFIG_HBM_AXI_IF_P30)
`define HBM_AXI_IF_P30
#endif
#if defined(CONFIG_HBM_AXI_IF_P31)
`define HBM_AXI_IF_P31
#endif


////////////////////////////////////////////////////////////////////
//   Don't touch, they will be replaced by patch_version.sh
  `define IMP_VERSION_DAT 64'h0
  `define BUILD_DATE_DAT 64'h0
  `define CARD_TYPE 8'h0
  `define USERCODE 64'h0


//   Don't touch, they will be replaced by patch_version.sh (only for HLS Action)
  `define HLS_ACTION_TYPE 32'h0
  `define HLS_RELEASE_LEVEL 32'h0
////////////////////////////////////////////////////////////////////

//Not implemented yet
  `define NUM_OF_ACTIONS 16'h0
  `define DMA_XFER_SIZE 4'h0
  `define DMA_ALIGNMENT 4'h0
  `define SDRAM_SIZE 16'h0


////////////////////////////////////////////////////////////////////
#if defined(CONFIG_AXI_ID_WIDTH)
`define IDW             CONFIG_AXI_ID_WIDTH
#endif
  `define CTXW            9
  `define TAGW            7

#if defined(CONFIG_ENABLE_ODMA_512)
  `define AXI_MM_DW     512
  `define AXI_ST_DW     512
#else
  `define AXI_MM_DW    1024
  `define AXI_ST_DW    1024
#endif

  `define AXI_MM_AW      64
  `define AXI_ST_AW      64
  `define AXI_LITE_DW    32
  `define AXI_LITE_AW    32
  `define AXI_AWUSER      9
  `define AXI_ARUSER      9
  `define AXI_WUSER       9
  `define AXI_RUSER       9
  `define AXI_BUSER       9
  `define AXI_ST_USER     9

  `define AXI_CARD_MEM_ID_WIDTH      4
  `define AXI_CARD_MEM_DATA_WIDTH    512
  `define AXI_CARD_MEM_ADDR_WIDTH    33
  `define AXI_CARD_MEM_USER_WIDTH    1

  `define AXI_CARD_HBM_ID_WIDTH      4
  `define AXI_CARD_HBM_DATA_WIDTH    256
  `define AXI_CARD_HBM_ADDR_WIDTH    34
  `define AXI_CARD_HBM_USER_WIDTH    1

  `define INT_BITS    64
/////////////////////////////////////////////////////////////////////
`ifdef ACTION_HALF_WIDTH
  `define AXI_ACT_DW    512
`else
  `define AXI_ACT_DW    1024
`endif
