`timescale 1ns/1ps

module multi_process_framework #(
    parameter ENGINE_NUM = NUM_ENGINES,
    // Parameters of Axi Slave Bus Interface AXI_CTRL_REG
    parameter C_S_AXI_CTRL_REG_DATA_WIDTH    = 32,
    parameter C_S_AXI_CTRL_REG_ADDR_WIDTH    = 32,

    // Parameters of Axi Master Bus Interface AXI_HOST_MEM ; to Host memory
    parameter C_M_AXI_HOST_MEM_ID_WIDTH      = 5,
    parameter C_M_AXI_HOST_MEM_ADDR_WIDTH    = 64,
    parameter C_M_AXI_HOST_MEM_DATA_WIDTH    = 1024,
    parameter C_M_AXI_HOST_MEM_AWUSER_WIDTH  = 8,
    parameter C_M_AXI_HOST_MEM_ARUSER_WIDTH  = 8,
    parameter C_M_AXI_HOST_MEM_WUSER_WIDTH   = 1,
    parameter C_M_AXI_HOST_MEM_RUSER_WIDTH   = 1,
    parameter C_M_AXI_HOST_MEM_BUSER_WIDTH   = 1,
    parameter INT_BITS                       = 3,
    parameter CONTEXT_BITS                   = 8
)(
    input              clk                      ,
    input              rst_n                    ,


    //---- AXI bus interfaced with SNAP core ----
    // AXI write address channel
    output    [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_awid          ,
    output    [C_M_AXI_HOST_MEM_ADDR_WIDTH - 1:0] m_axi_snap_awaddr        ,
    output    [0007:0] m_axi_snap_awlen         ,
    output    [0002:0] m_axi_snap_awsize        ,
    output    [0001:0] m_axi_snap_awburst       ,
    output    [0003:0] m_axi_snap_awcache       ,
    output             m_axi_snap_awlock        ,
    output    [0002:0] m_axi_snap_awprot        ,
    output    [0003:0] m_axi_snap_awqos         ,
    output    [0003:0] m_axi_snap_awregion      ,
    output reg [C_M_AXI_HOST_MEM_AWUSER_WIDTH - 1:0] m_axi_snap_awuser        ,
    output             m_axi_snap_awvalid       ,
    input              m_axi_snap_awready       ,
    // AXI write data channel
    output    [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_wid           ,
    output    [C_M_AXI_HOST_MEM_DATA_WIDTH - 1:0] m_axi_snap_wdata         ,
    output    [(C_M_AXI_HOST_MEM_DATA_WIDTH/8) - 1:0] m_axi_snap_wstrb         ,
    output             m_axi_snap_wlast         ,
    output             m_axi_snap_wvalid        ,
    input              m_axi_snap_wready        ,
    // AXI write response channel
    output             m_axi_snap_bready        ,
    input     [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_bid           ,
    input     [0001:0] m_axi_snap_bresp         ,
    input              m_axi_snap_bvalid        ,
    // AXI read address channel
    output    [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_arid          ,
    output    [C_M_AXI_HOST_MEM_ADDR_WIDTH - 1:0] m_axi_snap_araddr        ,
    output    [0007:0] m_axi_snap_arlen         ,
    output    [0002:0] m_axi_snap_arsize        ,
    output    [0001:0] m_axi_snap_arburst       ,
    output reg [C_M_AXI_HOST_MEM_ARUSER_WIDTH - 1:0] m_axi_snap_aruser        ,
    output    [0003:0] m_axi_snap_arcache       ,
    output             m_axi_snap_arlock        ,
    output    [0002:0] m_axi_snap_arprot        ,
    output    [0003:0] m_axi_snap_arqos         ,
    output    [0003:0] m_axi_snap_arregion      ,
    output             m_axi_snap_arvalid       ,
    input              m_axi_snap_arready       ,
    // AXI read data channel
    output             m_axi_snap_rready        ,
    input     [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_rid           ,
    input     [C_M_AXI_HOST_MEM_DATA_WIDTH - 1:0] m_axi_snap_rdata         ,
    input     [0001:0] m_axi_snap_rresp         ,
    input              m_axi_snap_rlast         ,
    input              m_axi_snap_rvalid        ,

    //---- AXI Lite bus interfaced with SNAP core ----
    // AXI write address channel
    output             s_axi_snap_awready       ,
    input     [C_S_AXI_CTRL_REG_ADDR_WIDTH - 1:0] s_axi_snap_awaddr        ,
    input     [0002:0] s_axi_snap_awprot        ,
    input              s_axi_snap_awvalid       ,
    // axi write data channel
    output             s_axi_snap_wready        ,
    input     [C_S_AXI_CTRL_REG_DATA_WIDTH - 1:0] s_axi_snap_wdata         ,
    input     [(C_S_AXI_CTRL_REG_DATA_WIDTH/8) - 1:0] s_axi_snap_wstrb         ,
    input              s_axi_snap_wvalid        ,
    // AXI response channel
    output    [0001:0] s_axi_snap_bresp         ,
    output             s_axi_snap_bvalid        ,
    input              s_axi_snap_bready        ,
    // AXI read address channel
    output             s_axi_snap_arready       ,
    input              s_axi_snap_arvalid       ,
    input     [C_S_AXI_CTRL_REG_ADDR_WIDTH - 1:0] s_axi_snap_araddr        ,
    input     [0002:0] s_axi_snap_arprot        ,
    // AXI read data channel
    output    [C_S_AXI_CTRL_REG_DATA_WIDTH - 1:0] s_axi_snap_rdata         ,
    output    [0001:0] s_axi_snap_rresp         ,
    input              s_axi_snap_rready        ,
    output             s_axi_snap_rvalid        ,

    // Other signals
    input              i_app_ready              ,
    input      [31:0]  i_action_type            ,
    input      [31:0]  i_action_version         ,
    output             o_interrupt              ,
    input              i_interrupt_ack
    );

    wire      [ENGINE_NUM-1:0]         kernel_done       ;
    wire      [ENGINE_NUM-1:0]         kernel_start      ;
    wire      [1023:0]                 kernel_data       ;

    wire    [87:0]  process_info_w;
    wire            process_start_w;
    wire            process_ready_w;
    wire            dsc0_pull_w;
    wire            dsc0_ready_w;
	wire    [1023:0]    dsc0_data_w;
    wire            complete_push_w;
    wire    [40:0]  return_data_w;
    wire            complete_ready_w;
    wire    [31:0]  cmpl_ram_data_w;
    wire    [8:0]   cmpl_ram_addr_w;
    wire            cmpl_ram_hi_w;
    wire            cmpl_ram_lo_w;

    // AXI write address channel
    wire                                                kernel_m_axi_snap_awid [ENGINE_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH -1 :0]          kernel_m_axi_snap_awaddr [ENGINE_NUM-1:0];
    wire   [0007:0]                                     kernel_m_axi_snap_awlen [ENGINE_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_awsize [ENGINE_NUM-1:0];
    wire   [0001:0]                                     kernel_m_axi_snap_awburst [ENGINE_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_awcache [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_awlock [ENGINE_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_awprot [ENGINE_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_awqos [ENGINE_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_awregion [ENGINE_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_AWUSER_WIDTH - 1:0]        kernel_m_axi_snap_awuser [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_awvalid [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_awready [ENGINE_NUM-1:0];
    // AXI write data channel
    wire                                                kernel_m_axi_snap_wid [ENGINE_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_DATA_WIDTH - 1:0]          kernel_m_axi_snap_wdata [ENGINE_NUM-1:0];
    wire   [(C_M_AXI_HOST_MEM_DATA_WIDTH/8) - 1:0]      kernel_m_axi_snap_wstrb [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_wlast [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_wvalid [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_wready [ENGINE_NUM-1:0];
    // AXI write response channel
    wire                                                kernel_m_axi_snap_bready [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_bid [ENGINE_NUM-1:0];
    wire   [1:0]                                        kernel_m_axi_snap_bresp [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_bvalid [ENGINE_NUM-1:0];
    // AXI read address channel
    wire                                                kernel_m_axi_snap_arid [ENGINE_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH-1:0]            kernel_m_axi_snap_araddr [ENGINE_NUM-1:0];
    wire   [0007:0]                                     kernel_m_axi_snap_arlen [ENGINE_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_arsize [ENGINE_NUM-1:0];
    wire   [0001:0]                                     kernel_m_axi_snap_arburst [ENGINE_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_ARUSER_WIDTH-1:0]          kernel_m_axi_snap_aruser [ENGINE_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_arcache [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_arlock [ENGINE_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_arprot [ENGINE_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_arqos [ENGINE_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_arregion [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_arvalid [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_arready [ENGINE_NUM-1:0];
    // AXI read data channel
    wire                                                kernel_m_axi_snap_rready [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_rid [ENGINE_NUM-1:0];
    wire    [C_M_AXI_HOST_MEM_DATA_WIDTH - 1:0]         kernel_m_axi_snap_rdata [ENGINE_NUM-1:0];
    wire    [1:0]                                       kernel_m_axi_snap_rresp [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_rlast [ENGINE_NUM-1:0];
    wire                                                kernel_m_axi_snap_rvalid [ENGINE_NUM-1:0];
    wire    [C_S_AXI_CTRL_REG_ADDR_WIDTH - 1:0]         s_axi_snap_awaddr_no_pasid;
    wire    [C_S_AXI_CTRL_REG_ADDR_WIDTH - 1:0]         s_axi_snap_araddr_no_pasid;

    assign s_axi_snap_awaddr_no_pasid = {10'b0, s_axi_snap_awaddr[21:0]};
    assign s_axi_snap_araddr_no_pasid = {10'b0, s_axi_snap_araddr[21:0]};

    // AXI write address channel
    wire                                                job_m_axi_awid;
    wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH -1 :0]          job_m_axi_awaddr;
    wire   [0007:0]                                     job_m_axi_awlen;
    wire   [0002:0]                                     job_m_axi_awsize;
    wire   [0001:0]                                     job_m_axi_awburst;
    wire   [0003:0]                                     job_m_axi_awcache;
    wire                                                job_m_axi_awlock;
    wire   [0002:0]                                     job_m_axi_awprot;
    wire   [0003:0]                                     job_m_axi_awqos;
    wire   [0003:0]                                     job_m_axi_awregion;
    wire   [C_M_AXI_HOST_MEM_AWUSER_WIDTH - 1:0]        job_m_axi_awuser;
    wire                                                job_m_axi_awvalid;
    wire                                                job_m_axi_awready;
    // AXI write data channel
    wire                                                job_m_axi_wid;
    wire   [1023:0]                                     job_m_axi_wdata;
    wire   [127:0]                                      job_m_axi_wstrb;
    wire                                                job_m_axi_wlast;
    wire                                                job_m_axi_wvalid;
    wire                                                job_m_axi_wready;
    // AXI write response channel
    wire                                                job_m_axi_bready;
    wire                                                job_m_axi_bid;
    wire   [1:0]                                        job_m_axi_bresp;
    wire                                                job_m_axi_bvalid;
    // AXI read address channel
    wire                                                job_m_axi_arid;
    wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH-1:0]            job_m_axi_araddr;
    wire   [0007:0]                                     job_m_axi_arlen;
    wire   [0002:0]                                     job_m_axi_arsize;
    wire   [0001:0]                                     job_m_axi_arburst;
    wire   [C_M_AXI_HOST_MEM_ARUSER_WIDTH-1:0]          job_m_axi_aruser;
    wire   [0003:0]                                     job_m_axi_arcache;
    wire                                                job_m_axi_arlock;
    wire   [0002:0]                                     job_m_axi_arprot;
    wire   [0003:0]                                     job_m_axi_arqos;
    wire   [0003:0]                                     job_m_axi_arregion;
    wire                                                job_m_axi_arvalid;
    wire                                                job_m_axi_arready;
    // AXI read data channel
    wire                                                job_m_axi_rready;
    wire                                                job_m_axi_rid;
    wire    [1023:0]                                    job_m_axi_rdata;
    wire    [1:0]                                       job_m_axi_rresp;
    wire                                                job_m_axi_rlast;
    wire                                                job_m_axi_rvalid;

    wire               kernel_s_axi_snap_awready [ENGINE_NUM-1:0];
    wire [31:0]        kernel_s_axi_snap_awaddr [ENGINE_NUM-1:0];
    wire [2:0]         kernel_s_axi_snap_awprot [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_awvalid [ENGINE_NUM-1:0];
    // axi write data channel
    wire               kernel_s_axi_snap_wready [ENGINE_NUM-1:0];
    wire [31:0]        kernel_s_axi_snap_wdata [ENGINE_NUM-1:0];
    wire [3:0]         kernel_s_axi_snap_wstrb [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_wvalid [ENGINE_NUM-1:0];
    // AXI response channel
    wire [1:0]         kernel_s_axi_snap_bresp [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_bvalid [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_bready [ENGINE_NUM-1:0];
    // AXI read address channel
    wire               kernel_s_axi_snap_arready [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_arvalid [ENGINE_NUM-1:0];
    wire [31:0]        kernel_s_axi_snap_araddr [ENGINE_NUM-1:0];
    wire [2:0]         kernel_s_axi_snap_arprot [ENGINE_NUM-1:0];
    // AXI read data channel
    wire [31:0]        kernel_s_axi_snap_rdata [ENGINE_NUM-1:0];
    wire [1:0]         kernel_s_axi_snap_rresp [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_rready [ENGINE_NUM-1:0];
    wire               kernel_s_axi_snap_rvalid [ENGINE_NUM-1:0];
    //Instantiate kernels

    genvar i;
    generate
        for (i = 0; i < ENGINE_NUM; i = i + 1) begin:k_inst

            action_memcopy #(
                    // Parameters of Axi Slave Bus Interface AXI_CTRL_REG
       .C_S_AXI_CTRL_REG_DATA_WIDTH   (C_S_AXI_CTRL_REG_DATA_WIDTH   ),
       .C_S_AXI_CTRL_REG_ADDR_WIDTH   (C_S_AXI_CTRL_REG_ADDR_WIDTH   ),

                // Parameters of Axi Master Bus Interface AXI_HOST_MEM ; to Host memory
       .C_M_AXI_HOST_MEM_ID_WIDTH     (1 /*For each engine, the ID is only 1 bit. AXI interconnect will handle the ID for the master side*/),
       .C_M_AXI_HOST_MEM_ADDR_WIDTH   (C_M_AXI_HOST_MEM_ADDR_WIDTH   ),
       .C_M_AXI_HOST_MEM_DATA_WIDTH   (C_M_AXI_HOST_MEM_DATA_WIDTH   ),
       .C_M_AXI_HOST_MEM_AWUSER_WIDTH (C_M_AXI_HOST_MEM_AWUSER_WIDTH ),
       .C_M_AXI_HOST_MEM_ARUSER_WIDTH (C_M_AXI_HOST_MEM_ARUSER_WIDTH ),
       .C_M_AXI_HOST_MEM_WUSER_WIDTH  (C_M_AXI_HOST_MEM_WUSER_WIDTH  ),
       .C_M_AXI_HOST_MEM_RUSER_WIDTH  (C_M_AXI_HOST_MEM_RUSER_WIDTH  ),
       .C_M_AXI_HOST_MEM_BUSER_WIDTH  (C_M_AXI_HOST_MEM_BUSER_WIDTH  )
            ) memcopy (
       .clk                    (clk                    ),
       .rst_n                  (rst_n                  ),

                //---- AXI bus interfaced with SNAP core ----
                // AXI write address channel
       .m_axi_snap_awid        (kernel_m_axi_snap_awid[i]        ),
       .m_axi_snap_awaddr      (kernel_m_axi_snap_awaddr[i]      ),
       .m_axi_snap_awlen       (kernel_m_axi_snap_awlen[i]       ),
       .m_axi_snap_awsize      (kernel_m_axi_snap_awsize[i]      ),
       .m_axi_snap_awburst     (kernel_m_axi_snap_awburst[i]     ),
       .m_axi_snap_awcache     (kernel_m_axi_snap_awcache[i]     ),
       .m_axi_snap_awlock      (kernel_m_axi_snap_awlock[i]      ),
       .m_axi_snap_awprot      (kernel_m_axi_snap_awprot[i]      ),
       .m_axi_snap_awqos       (kernel_m_axi_snap_awqos[i]       ),
       .m_axi_snap_awregion    (kernel_m_axi_snap_awregion[i]    ),
       .m_axi_snap_awuser      (kernel_m_axi_snap_awuser[i]      ),
       .m_axi_snap_awvalid     (kernel_m_axi_snap_awvalid[i]     ),
       .m_axi_snap_awready     (kernel_m_axi_snap_awready[i]     ),
                // AXI write data channel
                //.m_axi_snap_wid         (kernel_m_axi_snap_wid[i]         ),
       .m_axi_snap_wdata       (kernel_m_axi_snap_wdata[i]       ),
       .m_axi_snap_wstrb       (kernel_m_axi_snap_wstrb[i]       ),
       .m_axi_snap_wlast       (kernel_m_axi_snap_wlast[i]       ),
       .m_axi_snap_wvalid      (kernel_m_axi_snap_wvalid[i]      ),
       .m_axi_snap_wready      (kernel_m_axi_snap_wready[i]      ),
                // AXI write response channel
       .m_axi_snap_bready      (kernel_m_axi_snap_bready[i]     ),
       .m_axi_snap_bid         (kernel_m_axi_snap_bid[i]         ),
       .m_axi_snap_bresp       (kernel_m_axi_snap_bresp[i]       ),
       .m_axi_snap_bvalid      (kernel_m_axi_snap_bvalid[i]      ),
                // AXI read address channel
       .m_axi_snap_arid        (kernel_m_axi_snap_arid[i]        ),
       .m_axi_snap_araddr      (kernel_m_axi_snap_araddr[i]      ),
       .m_axi_snap_arlen       (kernel_m_axi_snap_arlen[i]       ),
       .m_axi_snap_arsize      (kernel_m_axi_snap_arsize[i]      ),
       .m_axi_snap_arburst     (kernel_m_axi_snap_arburst[i]     ),
       .m_axi_snap_aruser      (kernel_m_axi_snap_aruser[i]      ),
       .m_axi_snap_arcache     (kernel_m_axi_snap_arcache[i]     ),
       .m_axi_snap_arlock      (kernel_m_axi_snap_arlock[i]      ),
       .m_axi_snap_arprot      (kernel_m_axi_snap_arprot[i]      ),
       .m_axi_snap_arqos       (kernel_m_axi_snap_arqos[i]       ),
       .m_axi_snap_arregion    (kernel_m_axi_snap_arregion[i]    ),
       .m_axi_snap_arvalid     (kernel_m_axi_snap_arvalid[i]     ),
       .m_axi_snap_arready     (kernel_m_axi_snap_arready[i]     ),
                // AXI  ead data channel
       .m_axi_snap_rready      (kernel_m_axi_snap_rready[i]      ),
       .m_axi_snap_rid         (kernel_m_axi_snap_rid[i]         ),
       .m_axi_snap_rdata       (kernel_m_axi_snap_rdata[i]       ),
       .m_axi_snap_rresp       (kernel_m_axi_snap_rresp[i]       ),
       .m_axi_snap_rlast       (kernel_m_axi_snap_rlast[i]       ),
       .m_axi_snap_rvalid      (kernel_m_axi_snap_rvalid[i]      ),
                // tmp
       .kernel_start           (kernel_start[i]),
       .kernel_done            (kernel_done[i]),
       .system_register        (kernel_data)
                //---- AXI Lite bus interfaced with SNAP core ----
                //.s_axi_snap_baseaddr      (32'h200 + i*32'h100                ),
                // AXI write address channel
                //.s_axi_snap_awready       (kernel_s_axi_snap_awready[i]       ),
                //.s_axi_snap_awaddr        (kernel_s_axi_snap_awaddr[i]        ),
                //.s_axi_snap_awprot        (kernel_s_axi_snap_awprot[i]        ),
                //.s_axi_snap_awvalid       (kernel_s_axi_snap_awvalid[i]       ),
                // axi write data channel
                //.s_axi_snap_wready        (kernel_s_axi_snap_wready[i]        ),
                //.s_axi_snap_wdata         (kernel_s_axi_snap_wdata[i]         ),
                //.s_axi_snap_wstrb         (kernel_s_axi_snap_wstrb[i]         ),
                //.s_axi_snap_wvalid        (kernel_s_axi_snap_wvalid[i]        ),
                // AXI response channel
                //.s_axi_snap_bresp         (kernel_s_axi_snap_bresp[i]         ),
                //.s_axi_snap_bvalid        (kernel_s_axi_snap_bvalid[i]        ),
                //.s_axi_snap_bready        (kernel_s_axi_snap_bready[i]        ),
                // AXI read address channel
                //.s_axi_snap_arready       (kernel_s_axi_snap_arready[i]       ),
                //.s_axi_snap_arvalid       (kernel_s_axi_snap_arvalid[i]       ),
                //.s_axi_snap_araddr        (kernel_s_axi_snap_araddr[i]        ),
                //.s_axi_snap_arprot        (kernel_s_axi_snap_arprot[i]        ),
                // AXI read data channel
                //.s_axi_snap_rdata         (kernel_s_axi_snap_rdata[i]         ),
                //.s_axi_snap_rresp         (kernel_s_axi_snap_rresp[i]         ),
                //.s_axi_snap_rready        (kernel_s_axi_snap_rready[i]        ),
                //.s_axi_snap_rvalid        (kernel_s_axi_snap_rvalid[i]        ),

                // Other signals
                //.i_app_ready              (i_app_ready                        ),
                //.i_action_type            (i_action_type                      ),
                //.i_action_version         (i_action_version                   )
                //.i_start                  (kernel_i_start[i]                  ),
                //.run_mode                 (run_mode                           ),
                //.system_register          (system_register                    ),
                //.user_register            (user_register                      ),
                //.o_complete               (kernel_o_complete[i]               )
                );
        end
    endgenerate

    // The AXI interconnect only have 4 bits ID, we need to stick the MSB of id to 0
    assign m_axi_snap_arid[C_M_AXI_HOST_MEM_ID_WIDTH-1] = 0;
    assign m_axi_snap_awid[C_M_AXI_HOST_MEM_ID_WIDTH-1] = 0;

    // Route ARUSER from engines to oc-accel core, since Xilinx axi interconnect doesn't have the ability to handle ARUSER signal.
    always @*
    begin
        case (m_axi_snap_arid)
            0: m_axi_snap_aruser = job_m_axi_aruser;
            //: my $kn = NUM_ENGINES;
            //: for (my $i = 0; $i < $kn; $i++) {
            //:     print qq(
            //:     $i+1: m_axi_snap_aruser = kernel_m_axi_snap_aruser[$i];
            //:     )
            //: }
            default:
                m_axi_snap_aruser = {C_M_AXI_HOST_MEM_ARUSER_WIDTH{1'b1}};
        endcase
    end

    // Route AWUSER from engines to oc-accel core, since Xilinx axi interconnect doesn't have the ability to handle AWUSER signal.
    always @*
    begin
        case (m_axi_snap_awid)
            0: m_axi_snap_awuser = job_m_axi_awuser;
            //: my $kn = NUM_ENGINES;
            //: for (my $i = 0; $i < $kn; $i++) {
            //:     print qq(
            //:     $i+1: m_axi_snap_awuser = kernel_m_axi_snap_awuser[$i];
            //:     )
            //: }
            default:
                m_axi_snap_awuser = {C_M_AXI_HOST_MEM_ARUSER_WIDTH{1'b1}};
        endcase
    end

    //8-to-1 AXI MM interconnect
    host_axi_interconnect_0 axi_mm_X (
        .INTERCONNECT_ACLK           ( clk),
        .INTERCONNECT_ARESETN        ( rst_n),

        //: my $kn = NUM_ENGINES;
        //: for (my $i = 0; $i < $kn; $i++) {
        //:     my $s = sprintf("%02d", $i+1);
        //:     print qq(
        //:     .S${s}_AXI_ARESET_OUT_N        ( ),
        //:     .S${s}_AXI_ACLK                ( clk),
        //:     .S${s}_AXI_AWID                ( kernel_m_axi_snap_awid    [$i]),
        //:     .S${s}_AXI_AWADDR              ( kernel_m_axi_snap_awaddr  [$i]),
        //:     .S${s}_AXI_AWLEN               ( kernel_m_axi_snap_awlen   [$i]),
        //:     .S${s}_AXI_AWSIZE              ( kernel_m_axi_snap_awsize  [$i]),
        //:     .S${s}_AXI_AWBURST             ( kernel_m_axi_snap_awburst [$i]),
        //:     .S${s}_AXI_AWLOCK              ( kernel_m_axi_snap_awlock  [$i]),
        //:     .S${s}_AXI_AWCACHE             ( kernel_m_axi_snap_awcache [$i]),
        //:     .S${s}_AXI_AWPROT              ( kernel_m_axi_snap_awprot  [$i]),
        //:     .S${s}_AXI_AWQOS               ( kernel_m_axi_snap_awqos   [$i]),
        //:     .S${s}_AXI_AWVALID             ( kernel_m_axi_snap_awvalid [$i]),
        //:     .S${s}_AXI_AWREADY             ( kernel_m_axi_snap_awready [$i]),
        //:     .S${s}_AXI_WDATA               ( kernel_m_axi_snap_wdata   [$i]),
        //:     .S${s}_AXI_WSTRB               ( kernel_m_axi_snap_wstrb   [$i]),
        //:     .S${s}_AXI_WLAST               ( kernel_m_axi_snap_wlast   [$i]),
        //:     .S${s}_AXI_WVALID              ( kernel_m_axi_snap_wvalid  [$i]),
        //:     .S${s}_AXI_WREADY              ( kernel_m_axi_snap_wready  [$i]),
        //:     .S${s}_AXI_BID                 ( kernel_m_axi_snap_bid     [$i]),
        //:     .S${s}_AXI_BRESP               ( kernel_m_axi_snap_bresp   [$i]),
        //:     .S${s}_AXI_BVALID              ( kernel_m_axi_snap_bvalid  [$i]),
        //:     .S${s}_AXI_BREADY              ( kernel_m_axi_snap_bready  [$i]),
        //:     .S${s}_AXI_ARID                ( kernel_m_axi_snap_arid    [$i]),
        //:     .S${s}_AXI_ARADDR              ( kernel_m_axi_snap_araddr  [$i]),
        //:     .S${s}_AXI_ARLEN               ( kernel_m_axi_snap_arlen   [$i]),
        //:     .S${s}_AXI_ARSIZE              ( kernel_m_axi_snap_arsize  [$i]),
        //:     .S${s}_AXI_ARBURST             ( kernel_m_axi_snap_arburst [$i]),
        //:     .S${s}_AXI_ARLOCK              ( kernel_m_axi_snap_arlock  [$i]),
        //:     .S${s}_AXI_ARCACHE             ( kernel_m_axi_snap_arcache [$i]),
        //:     .S${s}_AXI_ARPROT              ( kernel_m_axi_snap_arprot  [$i]),
        //:     .S${s}_AXI_ARQOS               ( kernel_m_axi_snap_arqos   [$i]),
        //:     .S${s}_AXI_ARVALID             ( kernel_m_axi_snap_arvalid [$i]),
        //:     .S${s}_AXI_ARREADY             ( kernel_m_axi_snap_arready [$i]),
        //:     .S${s}_AXI_RID                 ( kernel_m_axi_snap_rid     [$i]),
        //:     .S${s}_AXI_RDATA               ( kernel_m_axi_snap_rdata   [$i]),
        //:     .S${s}_AXI_RRESP               ( kernel_m_axi_snap_rresp   [$i]),
        //:     .S${s}_AXI_RLAST               ( kernel_m_axi_snap_rlast   [$i]),
        //:     .S${s}_AXI_RVALID              ( kernel_m_axi_snap_rvalid  [$i]),
        //:     .S${s}_AXI_RREADY              ( kernel_m_axi_snap_rready  [$i]),
        //:     );
        //: }

        .S00_AXI_ARESET_OUT_N        ( ),
        .S00_AXI_ACLK                ( clk),
        .S00_AXI_AWID                ( job_m_axi_awid),
        .S00_AXI_AWADDR              ( job_m_axi_awaddr),
        .S00_AXI_AWLEN               ( job_m_axi_awlen),
        .S00_AXI_AWSIZE              ( job_m_axi_awsize),
        .S00_AXI_AWBURST             ( job_m_axi_awburst),
        .S00_AXI_AWLOCK              ( job_m_axi_awlock),
        .S00_AXI_AWCACHE             ( job_m_axi_awcache),
        .S00_AXI_AWPROT              ( job_m_axi_awprot),
        .S00_AXI_AWQOS               ( job_m_axi_awqos),
        .S00_AXI_AWVALID             ( job_m_axi_awvalid),
        .S00_AXI_AWREADY             ( job_m_axi_awready),
        .S00_AXI_WDATA               ( job_m_axi_wdata),
        .S00_AXI_WSTRB               ( job_m_axi_wstrb),
        .S00_AXI_WLAST               ( job_m_axi_wlast),
        .S00_AXI_WVALID              ( job_m_axi_wvalid),
        .S00_AXI_WREADY              ( job_m_axi_wready),
        .S00_AXI_BID                 ( job_m_axi_bid),
        .S00_AXI_BRESP               ( job_m_axi_bresp),
        .S00_AXI_BVALID              ( job_m_axi_bvalid),
        .S00_AXI_BREADY              ( job_m_axi_bready),
        .S00_AXI_ARID                ( job_m_axi_arid),
        .S00_AXI_ARADDR              ( job_m_axi_araddr),
        .S00_AXI_ARLEN               ( job_m_axi_arlen),
        .S00_AXI_ARSIZE              ( job_m_axi_arsize),
        .S00_AXI_ARBURST             ( job_m_axi_arburst),
        .S00_AXI_ARLOCK              ( job_m_axi_arlock),
        .S00_AXI_ARCACHE             ( job_m_axi_arcache),
        .S00_AXI_ARPROT              ( job_m_axi_arprot),
        .S00_AXI_ARQOS               ( job_m_axi_arqos),
        .S00_AXI_ARVALID             ( job_m_axi_arvalid),
        .S00_AXI_ARREADY             ( job_m_axi_arready),
        .S00_AXI_RID                 ( job_m_axi_rid),
        .S00_AXI_RDATA               ( job_m_axi_rdata),
        .S00_AXI_RRESP               ( job_m_axi_rresp),
        .S00_AXI_RLAST               ( job_m_axi_rlast),
        .S00_AXI_RVALID              ( job_m_axi_rvalid),
        .S00_AXI_RREADY              ( job_m_axi_rready),
        
        .M00_AXI_ARESET_OUT_N        ( ),
        .M00_AXI_ACLK                ( clk),
        .M00_AXI_AWID                ( m_axi_snap_awid),
        .M00_AXI_AWADDR              ( m_axi_snap_awaddr),
        .M00_AXI_AWLEN               ( m_axi_snap_awlen),
        .M00_AXI_AWSIZE              ( m_axi_snap_awsize),
        .M00_AXI_AWBURST             ( m_axi_snap_awburst),
        .M00_AXI_AWLOCK              ( m_axi_snap_awlock),
        .M00_AXI_AWCACHE             ( m_axi_snap_awcache),
        .M00_AXI_AWPROT              ( m_axi_snap_awprot),
        .M00_AXI_AWQOS               ( m_axi_snap_awqos),
        .M00_AXI_AWVALID             ( m_axi_snap_awvalid),
        .M00_AXI_AWREADY             ( m_axi_snap_awready),
        .M00_AXI_WDATA               ( m_axi_snap_wdata),
        .M00_AXI_WSTRB               ( m_axi_snap_wstrb),
        .M00_AXI_WLAST               ( m_axi_snap_wlast),
        .M00_AXI_WVALID              ( m_axi_snap_wvalid),
        .M00_AXI_WREADY              ( m_axi_snap_wready),
        .M00_AXI_BID                 ( m_axi_snap_bid),
        .M00_AXI_BRESP               ( m_axi_snap_bresp),
        .M00_AXI_BVALID              ( m_axi_snap_bvalid),
        .M00_AXI_BREADY              ( m_axi_snap_bready),
        .M00_AXI_ARID                ( m_axi_snap_arid),
        .M00_AXI_ARADDR              ( m_axi_snap_araddr),
        .M00_AXI_ARLEN               ( m_axi_snap_arlen),
        .M00_AXI_ARSIZE              ( m_axi_snap_arsize),
        .M00_AXI_ARBURST             ( m_axi_snap_arburst),
        .M00_AXI_ARLOCK              ( m_axi_snap_arlock),
        .M00_AXI_ARCACHE             ( m_axi_snap_arcache),
        .M00_AXI_ARPROT              ( m_axi_snap_arprot),
        .M00_AXI_ARQOS               ( m_axi_snap_arqos),
        .M00_AXI_ARVALID             ( m_axi_snap_arvalid),
        .M00_AXI_ARREADY             ( m_axi_snap_arready),
        .M00_AXI_RID                 ( m_axi_snap_rid),
        .M00_AXI_RDATA               ( m_axi_snap_rdata),
        .M00_AXI_RRESP               ( m_axi_snap_rresp),
        .M00_AXI_RLAST               ( m_axi_snap_rlast),
        .M00_AXI_RVALID              ( m_axi_snap_rvalid),
        .M00_AXI_RREADY              ( m_axi_snap_rready)
        );

    //1-to-8 AXI-lite crossbar (demux)
    //host_axi_lite_crossbar_0 axi_lite_X (
    //    .aclk(clk)
    //    ,.aresetn(rst_n)
    //    ,.s_axi_awaddr( s_axi_snap_awaddr_no_pasid )
    //    ,.s_axi_awprot( s_axi_snap_awprot )
    //    ,.s_axi_awvalid( s_axi_snap_awvalid )
    //    ,.s_axi_awready( s_axi_snap_awready )
    //    ,.s_axi_wdata( s_axi_snap_wdata )
    //    ,.s_axi_wstrb( s_axi_snap_wstrb )
    //    ,.s_axi_wvalid( s_axi_snap_wvalid )
    //    ,.s_axi_wready( s_axi_snap_wready )
    //    ,.s_axi_bresp( s_axi_snap_bresp )
    //    ,.s_axi_bvalid( s_axi_snap_bvalid )
    //    ,.s_axi_bready( s_axi_snap_bready )
    //    ,.s_axi_araddr( s_axi_snap_araddr_no_pasid )
    //    ,.s_axi_arprot( s_axi_snap_arprot )
    //    ,.s_axi_arvalid( s_axi_snap_arvalid )
    //    ,.s_axi_arready( s_axi_snap_arready )
    //    ,.s_axi_rdata( s_axi_snap_rdata )
    //    ,.s_axi_rresp( s_axi_snap_rresp )
    //    ,.s_axi_rvalid( s_axi_snap_rvalid )
    //    ,.s_axi_rready( s_axi_snap_rready )

    //    //: my $kn = NUM_ENGINES;
    //    //: my @signals = qw(awaddr awprot awvalid awready wdata wstrb wvalid wready bresp bvalid bready araddr arprot arvalid arready rdata rresp rvalid rready);
    //    //: foreach my $si (@signals) {
    //    //:     print qq {
    //    //:     ,.m_axi_${si}(\{
    //    //:     };
    //    //:     for (my $i = $kn; $i >= 0; $i--) {
    //    //:         if ($i == 0) {
    //    //:             print qq(
    //    //:             kernel_s_axi_snap_${si}[$i]
    //    //:             );
    //    //:         } else {
    //    //:             print qq(
    //    //:             kernel_s_axi_snap_${si}[$i],
    //    //:             );
    //    //:         }
    //    //:     }
    //    //:     print qq {
    //    //:     \})
    //    //:     };
    //    //: }

    //    );

mp_control #(
       .KERNEL_NUM   (ENGINE_NUM                     ),
       .DATA_WIDTH   (32                             ),
       .ADDR_WIDTH   (32                             )
 ) mp_control1 (
        .clk                        (clk                   ),
        .rst_n                      (rst_n                 ),
        .s_axi_awready              (s_axi_snap_awready    ),
        .s_axi_awaddr               (s_axi_snap_awaddr     ),//32b
        .s_axi_awprot               (s_axi_snap_awprot     ),//3b
        .s_axi_awvalid              (s_axi_snap_awvalid    ),
        .s_axi_wready               (s_axi_snap_wready     ),
        .s_axi_wdata                (s_axi_snap_wdata      ),//32b
        .s_axi_wstrb                (s_axi_snap_wstrb      ),//4b
        .s_axi_wvalid               (s_axi_snap_wvalid     ),
        .s_axi_bresp                (s_axi_snap_bresp      ),//2b
        .s_axi_bvalid               (s_axi_snap_bvalid     ),
        .s_axi_bready               (s_axi_snap_bready     ),
        .s_axi_arready              (s_axi_snap_arready    ),
        .s_axi_arvalid              (s_axi_snap_arvalid    ),
        .s_axi_araddr               (s_axi_snap_araddr     ),//32b
        .s_axi_arprot               (s_axi_snap_arprot     ),//3b
        .s_axi_rdata                (s_axi_snap_rdata      ),//32b
        .s_axi_rresp                (s_axi_snap_rresp      ),//2b
        .s_axi_rready               (s_axi_snap_rready     ),
        .s_axi_rvalid               (s_axi_snap_rvalid     ),
        .cmpl_ram_addr_o            ( cmpl_ram_addr_w       ),
        .cmpl_ram_hi_o              ( cmpl_ram_hi_w         ),
        .cmpl_ram_lo_o              ( cmpl_ram_lo_w         ),
        .cmpl_ram_data_o            ( cmpl_ram_data_w       ),
        .process_info_o             ( process_info_w        ),
        .process_start_o            ( process_start_w       ),
        .process_ready_i            ( process_ready_w       ),
        .i_action_type              ( i_action_type         ),
        .i_action_version           ( i_action_version      )
        );

mp_manager mp_manager0 (
       .clk                 ( clk                   ),
       .rst_n               ( rst_n                 ),
       .process_info_i      ( process_info_w        ),
       .process_start_i     ( process_start_w       ),
       .process_ready_o     ( process_ready_w       ),
       .dsc0_pull_i         ( dsc0_pull_w           ),
       .dsc0_ready_o        ( dsc0_ready_w          ),
       .dsc0_data_o         ( dsc0_data_w           ),

                        //---- AXI bus interfaced with SNAP core ----
                          // AXI read address channel
       .m_axi_arid        (job_m_axi_arid        ),
       .m_axi_araddr      (job_m_axi_araddr      ),
       .m_axi_arlen       (job_m_axi_arlen       ),
       .m_axi_arsize      (job_m_axi_arsize      ),
       .m_axi_arburst     (job_m_axi_arburst     ),
       .m_axi_aruser      (job_m_axi_aruser      ),
       .m_axi_arcache     (job_m_axi_arcache     ),
       .m_axi_arlock      (job_m_axi_arlock      ),
       .m_axi_arprot      (job_m_axi_arprot      ),
       .m_axi_arqos       (job_m_axi_arqos       ),
       .m_axi_arregion    (job_m_axi_arregion    ),
       .m_axi_arvalid     (job_m_axi_arvalid     ),
       .m_axi_arready     (job_m_axi_arready     ),
                          // AXI read data channel
       .m_axi_rready      (job_m_axi_rready      ),
       .m_axi_rid         (job_m_axi_rid         ),
       .m_axi_rdata       (job_m_axi_rdata       ),
       .m_axi_rresp       (job_m_axi_rresp       ),
       .m_axi_rlast       (job_m_axi_rlast       ),
       .m_axi_rvalid      (job_m_axi_rvalid      )
        );

mp_scheduler mp_scheduler0(
        .clk                    ( clk                   ),
        .rst_n                  ( rst_n                 ),
        .dsc0_pull_o            ( dsc0_pull_w           ),
        .dsc0_ready_i           ( dsc0_ready_w          ),
        .dsc0_data_i            ( dsc0_data_w           ),
        .complete_ready_i       ( complete_ready_w      ),
        .complete_push_o        ( complete_push_w       ),
        .return_data_o          ( return_data_w         ),
        .engine_start           ( kernel_start          ),
        .jd_payload             ( kernel_data           ),
        .engine_done            ( kernel_done           )
        );

mp_completion mp_completion0(
        .clk                    ( clk                   ),
        .rst_n                  ( rst_n                 ),
        .cmpl_ram_addr_i        ( cmpl_ram_addr_w       ),
        .cmpl_ram_hi_i          ( cmpl_ram_hi_w         ),
        .cmpl_ram_lo_i          ( cmpl_ram_lo_w         ),
        .cmpl_ram_data_i        ( cmpl_ram_data_w       ),
        .complete_ready_o       ( complete_ready_w      ),
        .complete_push_i        ( complete_push_w       ),
        .return_data_i          ( return_data_w         ),
        .m_axi_awid             ( job_m_axi_awid        ),
        .m_axi_awaddr           ( job_m_axi_awaddr      ),
        .m_axi_awlen            ( job_m_axi_awlen       ),
        .m_axi_awsize           ( job_m_axi_awsize      ),
        .m_axi_awburst          ( job_m_axi_awburst     ),
        .m_axi_awlock           ( job_m_axi_awlock      ),
        .m_axi_awcache          ( job_m_axi_awcache     ),
        .m_axi_awprot           ( job_m_axi_awprot      ),
        .m_axi_awqos            ( job_m_axi_awqos       ),
        .m_axi_awvalid          ( job_m_axi_awvalid     ),
        .m_axi_awready          ( job_m_axi_awready     ),
        .m_axi_awuser           ( job_m_axi_awuser      ),
        .m_axi_wid              ( job_m_axi_wid         ),
        .m_axi_wdata            ( job_m_axi_wdata       ),
        .m_axi_wstrb            ( job_m_axi_wstrb       ),
        .m_axi_wlast            ( job_m_axi_wlast       ),
        .m_axi_wvalid           ( job_m_axi_wvalid      ),
        .m_axi_wready           ( job_m_axi_wready      ),
        .m_axi_bid              ( job_m_axi_bid         ),
        .m_axi_bresp            ( job_m_axi_bresp       ),
        .m_axi_bvalid           ( job_m_axi_bvalid      ),
        .m_axi_bready           ( job_m_axi_bready      )
        );

        assign job_m_axi_awregion= 'd0;
        assign o_interrupt       = 'd0;
        assign m_axi_snap_wid    = 'd0;
        assign m_axi_snap_awregion = 'd0;
        assign m_axi_snap_arregion = 'd0;

endmodule
